trigger:
  - main

variables:
  nodeVersion: '18.x'
  AZURE_WEBAPP_NAME: 'buddy-chat-app'
  AZURE_BACKEND_NAME: 'chat-app-backend-123'
  AZURE_RESOURCE_GROUP: 'chat-app-rg'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(npm_config_cache)
      displayName: 'Cache npm packages'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run build
      displayName: 'Build application'
      env:
        CI: false

    - publish: $(System.DefaultWorkingDirectory)/build
      artifact: frontend-build
      displayName: 'Publish frontend build'

    - publish: $(System.DefaultWorkingDirectory)/build/server
      artifact: backend-build
      displayName: 'Publish backend build'

- stage: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployFrontend
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-build
            displayName: 'Download frontend build'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure Service Connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Configure frontend
                az webapp config set \
                  --resource-group $(AZURE_RESOURCE_GROUP) \
                  --name $(AZURE_WEBAPP_NAME) \
                  --linux-fx-version "NODE|18-lts"
                
                az webapp config set \
                  --resource-group $(AZURE_RESOURCE_GROUP) \
                  --name $(AZURE_WEBAPP_NAME) \
                  --startup-file "pm2 serve /home/site/wwwroot --no-daemon --spa"
                
                # Deploy frontend
                az webapp deploy \
                  --resource-group $(AZURE_RESOURCE_GROUP) \
                  --name $(AZURE_WEBAPP_NAME) \
                  --src-path "$(Pipeline.Workspace)/frontend-build" \
                  --type zip
                
                # Configure frontend settings
                az webapp config appsettings set \
                  --resource-group $(AZURE_RESOURCE_GROUP) \
                  --name $(AZURE_WEBAPP_NAME) \
                  --settings \
                    PRE_BUILD_COMMAND="npm install -g pm2" \
                    SCM_DO_BUILD_DURING_DEPLOYMENT=true
            displayName: 'Deploy and configure frontend'

  - deployment: DeployBackend
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend-build
            displayName: 'Download backend build'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure Service Connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Configure backend
                az webapp config set \
                  --resource-group $(AZURE_RESOURCE_GROUP) \
                  --name $(AZURE_BACKEND_NAME) \
                  --linux-fx-version "NODE|18-lts"
                
                az webapp config set \
                  --resource-group $(AZURE_RESOURCE_GROUP) \
                  --name $(AZURE_BACKEND_NAME) \
                  --startup-file "pm2 start /home/site/wwwroot/server.js --name backend --no-daemon --wait-ready --listen-timeout 10000"
                
                # Deploy backend
                az webapp deploy \
                  --resource-group $(AZURE_RESOURCE_GROUP) \
                  --name $(AZURE_BACKEND_NAME) \
                  --src-path "$(Pipeline.Workspace)/backend-build" \
                  --type zip
                
                # Configure backend settings
                az webapp config appsettings set \
                  --resource-group $(AZURE_RESOURCE_GROUP) \
                  --name $(AZURE_BACKEND_NAME) \
                  --settings \
                    PRE_BUILD_COMMAND="npm install -g pm2" \
                    SCM_DO_BUILD_DURING_DEPLOYMENT=true \
                    COSMOS_DB_CONNECTION_STRING="$(COSMOS_DB_CONNECTION_STRING)" \
                    REDIS_CONNECTION_STRING="$(REDIS_CONNECTION_STRING)" \
                    NODE_ENV=production
            displayName: 'Deploy and configure backend'

  - job: HealthCheck
    dependsOn: [DeployFrontend, DeployBackend]
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure Service Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          check_health() {
            local url=$1
            local name=$2
            local max_retries=10
            local retry_delay=10
            local retry=0
            
            while [ $retry -lt $max_retries ]; do
              status=$(curl -s -o /dev/null -w "%{http_code}" $url)
              if [ "$status" = "200" ]; then
                echo "$name is healthy (Status: $status)"
                return 0
              fi
              echo "$name not ready (Status: $status), retrying in ${retry_delay}s... (Attempt $((retry+1))/$max_retries)"
              sleep $retry_delay
              retry=$((retry+1))
            done
            
            echo "$name failed health check after $max_retries attempts"
            az webapp log tail --name $name --resource-group $(AZURE_RESOURCE_GROUP)
            return 1
          }

          # Run health checks in parallel
          check_health "https://$(AZURE_WEBAPP_NAME).azurewebsites.net" "$(AZURE_WEBAPP_NAME)" &
          frontend_pid=$!
          
          check_health "https://$(AZURE_BACKEND_NAME).azurewebsites.net/health" "$(AZURE_BACKEND_NAME)" &
          backend_pid=$!
          
          # Wait for both checks and capture exit codes
          wait $frontend_pid
          frontend_status=$?
          wait $backend_pid
          backend_status=$?
          
          # Exit with error if either check failed
          [ $frontend_status -eq 0 ] && [ $backend_status -eq 0 ]
      displayName: 'Verify Deployment Health'
