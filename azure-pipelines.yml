trigger:
  - main

variables:
  nodeVersion: '18.x'

pool:
  name: Default

stages:
- stage: Build
  jobs:
  - job: BuildJob
    maxParallel: 1
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run build
      displayName: 'Build application'
      env:
        CI: false

    - task: CopyFiles@2
      inputs:
        Contents: |
          build/**
          server/**
          package.json
          web.config
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy files to artifact staging'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish artifacts'

- stage: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployFrontend
    environment: 'production'
    maxParallel: 1
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure Service Connection'
              appName: 'buddy-chat-app'
              package: '$(Pipeline.Workspace)/drop/build'
              deploymentMethod: 'auto'
            displayName: 'Deploy Frontend'

  - deployment: DeployBackend
    environment: 'production'
    maxParallel: 1
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure Service Connection'
              appName: 'chat-app-backend-123'
              package: '$(Pipeline.Workspace)/drop/server'
              deploymentMethod: 'auto'
            displayName: 'Deploy Backend'

          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: 'Azure Service Connection'
              appName: 'chat-app-backend-123'
              appSettings: |
                [
                  {
                    "name": "COSMOS_DB_CONNECTION_STRING",
                    "value": "$(COSMOS_DB_CONNECTION_STRING)"
                  },
                  {
                    "name": "REDIS_CONNECTION_STRING",
                    "value": "$(REDIS_CONNECTION_STRING)"
                  },
                  {
                    "name": "NODE_ENV",
                    "value": "production"
                  }
                ]
            displayName: 'Configure App Settings'
