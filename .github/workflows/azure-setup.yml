name: Setup Azure Authentication

on:
  workflow_dispatch:
    inputs:
      azure_creds:
        description: 'Azure credentials JSON'
        required: true

permissions: write-all

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      creds_valid: ${{ steps.validate_creds.outputs.valid }}
    steps:
    - name: Validate Azure credentials format
      id: validate_creds
      run: |
        if echo '${{github.event.inputs.azure_creds}}' | jq -e . >/dev/null 2>&1; then
          required_fields=("clientId" "clientSecret" "tenantId" "subscriptionId")
          valid=true
          for field in "${required_fields[@]}"; do
            if ! echo '${{github.event.inputs.azure_creds}}' | jq -e "has(\"$field\")" >/dev/null; then
              echo "Error: Missing required field '$field' in credentials"
              valid=false
              break
            fi
          done
          echo "valid=$valid" >> $GITHUB_OUTPUT
        else
          echo "Error: Invalid JSON format in credentials"
          echo "valid=false" >> $GITHUB_OUTPUT
        fi

  setup:
    needs: validate
    if: needs.validate.outputs.creds_valid == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Generate cache key
      id: cache-key
      run: echo "value=${{ hashFiles('package-lock.json', 'package.json') }}" >> $GITHUB_OUTPUT

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-deps-${{ steps.cache-key.outputs.value }}
        restore-keys: |
          npm-deps-

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Parse Azure credentials
      id: creds
      run: |
        echo '${{github.event.inputs.azure_creds}}' > creds.json
        {
          echo "CLIENT_ID=$(jq -r .clientId creds.json)"
          echo "CLIENT_SECRET=$(jq -r .clientSecret creds.json)"
          echo "TENANT_ID=$(jq -r .tenantId creds.json)"
          echo "SUBSCRIPTION_ID=$(jq -r .subscriptionId creds.json)"
        } >> $GITHUB_ENV
        rm creds.json

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci
        if [ $? -ne 0 ]; then
          echo "Failed to install dependencies"
          exit 1
        fi

    - name: Verify GitHub PAT
      id: verify_pat
      run: |
        if [ -z "${{ secrets.GH_PAT }}" ]; then
          echo "::error::GH_PAT secret is not configured"
          echo "Please add it in Settings > Secrets and variables > Actions"
          exit 1
        fi
        
        # Verify PAT has required permissions
        response=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
                      https://api.github.com/user)
        if [ $? -ne 0 ]; then
          echo "::error::Failed to validate GH_PAT"
          exit 1
        fi
        
        scopes=$(curl -s -I -H "Authorization: token ${{ secrets.GH_PAT }}" \
                    https://api.github.com/user | grep -i x-oauth-scopes)
        if ! echo "$scopes" | grep -q "repo"; then
          echo "::error::GH_PAT missing required 'repo' scope"
          exit 1
        fi

    - name: Verify Azure CLI installation
      run: |
        if ! command -v az &> /dev/null; then
          echo "Installing Azure CLI..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        fi
        az version

    - name: Setup Azure authentication
      id: azure_auth
      env:
        AZURE_CLIENT_ID: ${{env.CLIENT_ID}}
        AZURE_CLIENT_SECRET: ${{env.CLIENT_SECRET}}
        AZURE_TENANT_ID: ${{env.TENANT_ID}}
        AZURE_SUBSCRIPTION_ID: ${{env.SUBSCRIPTION_ID}}
      run: |
        echo "Setting up Azure authentication..."
        
        # Verify Azure credentials
        az login --service-principal \
          -u $AZURE_CLIENT_ID \
          -p $AZURE_CLIENT_SECRET \
          --tenant $AZURE_TENANT_ID
        
        if [ $? -ne 0 ]; then
          echo "::error::Failed to authenticate with Azure"
          exit 1
        fi
        
        # Set subscription
        az account set --subscription $AZURE_SUBSCRIPTION_ID
        if [ $? -ne 0 ]; then
          echo "::error::Failed to set Azure subscription"
          exit 1
        fi
        
        # Run setup script
        node setup-azure-auth.js "${{ secrets.GH_PAT }}"

    - name: Verify setup
      if: success()
      run: |
        echo "Verifying Azure resources..."
        
        # Check resource group
        az group show --name chat-app-rg &>/dev/null
        if [ $? -ne 0 ]; then
          echo "::error::Resource group verification failed"
          exit 1
        fi
        
        # Check web apps
        for app in buddy-chat-app chat-app-backend-123; do
          az webapp show --name $app --resource-group chat-app-rg &>/dev/null
          if [ $? -ne 0 ]; then
            echo "::error::Web app '$app' verification failed"
            exit 1
          fi
        done
        
        echo "Setup completed successfully!"

    - name: Cleanup
      if: always()
      run: |
        # Clear any sensitive files
        rm -f creds.json
        
        # Logout from Azure CLI
        az logout || true
