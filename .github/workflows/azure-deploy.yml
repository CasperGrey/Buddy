name: Deploy to Azure

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'api/**'
      - 'public/**'
      - 'package.json'
      - '.github/workflows/azure-deploy.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  deployments: write

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_BUILDKIT: 1
  NODE_VERSION: '18.x'
  BACKEND_APP_NAME: chat-functions-prod
  BACKEND_RG: rg-chat-prod-001
  FRONTEND_APP_NAME: buddy-chat-app
  FRONTEND_RG: chat-app-frontend-rg

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      deployments: write
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npm install -g @graphql-codegen/cli @graphql-codegen/typescript @graphql-codegen/typescript-operations @graphql-codegen/typescript-react-apollo

    - name: Generate GraphQL types
      run: |
        npm run generate
        if [ ! -f "src/generated/graphql.ts" ]; then
          echo "Error: GraphQL types were not generated"
          exit 1
        fi

    - name: Azure login (Backend)
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_BACKEND_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_BACKEND_SUBSCRIPTION_ID }}

    - name: Build and push backend container
      run: |
        # Get ACR details
        ACR_NAME=$(az acr list --resource-group ${{ env.BACKEND_RG }} --query "[0].name" -o tsv)
        ACR_LOGIN_SERVER=$(az acr list --resource-group ${{ env.BACKEND_RG }} --query "[0].loginServer" -o tsv)
        
        # Login to ACR
        az acr login -n $ACR_NAME
        
        # Build and push Docker image
        docker build -t $ACR_LOGIN_SERVER/${{ env.BACKEND_APP_NAME }}:latest .
        docker push $ACR_LOGIN_SERVER/${{ env.BACKEND_APP_NAME }}:latest

    - name: Build frontend
      run: |
        export NODE_OPTIONS="--max-old-space-size=4096"
        export REACT_APP_GRAPHQL_HTTP_URL="https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/graphql"
        export REACT_APP_GRAPHQL_WS_URL="wss://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/graphql-ws"
        npm run build
        cd build
        zip -r ../frontend.zip . -x "*.map" "*.txt" "*.md"

    - name: Configure backend
      run: |
        # Get Cosmos DB connection string
        cosmos_connection_string=$(az cosmosdb keys list \
          --name "chat-cosmos-prod" \
          --resource-group ${{ env.BACKEND_RG }} \
          --type connection-strings \
          --query "connectionStrings[0].connectionString" -o tsv)

        # Get Event Grid settings
        event_grid_endpoint=$(az eventgrid topic show \
          --name "chat-events-prod" \
          --resource-group ${{ env.BACKEND_RG }} \
          --query "endpoint" -o tsv)
        
        event_grid_key=$(az eventgrid topic key list \
          --name "chat-events-prod" \
          --resource-group ${{ env.BACKEND_RG }} \
          --query "key1" -o tsv)

        # Configure function app settings
        az functionapp config appsettings set \
          --name ${{ env.BACKEND_APP_NAME }} \
          --resource-group ${{ env.BACKEND_RG }} \
          --settings \
            FUNCTIONS_WORKER_RUNTIME=dotnet \
            FUNCTIONS_EXTENSION_VERSION=~4 \
            FUNCTIONS_INPROC_NET8_ENABLED=true \
            ASPNETCORE_ENVIRONMENT=Production \
            WEBSITE_CONTENTAZUREFILECONNECTIONSTRING="$(az storage account show-connection-string --name chatstor${environment}${uniqueString(resourceGroup().id)} --resource-group ${{ env.BACKEND_RG }} --query connectionString -o tsv)" \
            CosmosDbConnectionString="$cosmos_connection_string" \
            EventGridEndpoint="$event_grid_endpoint" \
            EventGridKey="$event_grid_key"

    - name: Deploy backend container
      run: |
        az functionapp restart --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.BACKEND_RG }}

    - name: Test backend
      run: |
        # Wait for deployment to stabilize (increased for .NET 8.0 In-Process startup)
        echo "Waiting 45 seconds for function app to initialize..."
        sleep 45

        # Ensure function app is running
        status=$(az functionapp show \
          --name ${{ env.BACKEND_APP_NAME }} \
          --resource-group ${{ env.BACKEND_RG }} \
          --query "state" -o tsv)

        if [ "$status" != "Running" ]; then
          echo "Function app is not running. Current state: $status"
          exit 1
        fi
        
        # Get function key
        function_key=$(az functionapp keys list \
          --name ${{ env.BACKEND_APP_NAME }} \
          --resource-group ${{ env.BACKEND_RG }} \
          --query "functionKeys.default" -o tsv)

        # Test GraphQL endpoint
        response=$(curl -s -X POST \
          "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/graphql" \
          -H "Content-Type: application/json" \
          -H "x-functions-key: $function_key" \
          -d '{"query":"query{__schema{types{name}}}"}')

        if ! echo "$response" | grep -q '"types"'; then
          echo "GraphQL endpoint check failed"
          echo "$response"
          exit 1
        fi

    - name: Azure login (Frontend)
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_FRONTEND_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_FRONTEND_SUBSCRIPTION_ID }}

    - name: Deploy frontend
      run: |
        az webapp deploy \
          --resource-group ${{ env.FRONTEND_RG }} \
          --name ${{ env.FRONTEND_APP_NAME }} \
          --src-path "frontend.zip" \
          --type zip \
          --async false

        az webapp config appsettings set \
          --resource-group ${{ env.FRONTEND_RG }} \
          --name ${{ env.FRONTEND_APP_NAME }} \
          --settings \
            WEBSITE_NODE_DEFAULT_VERSION=18-lts \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            NODE_ENV=production

    - name: Test frontend
      run: |
        # Wait for deployment to stabilize
        sleep 30
        
        # Test frontend health
        status=$(curl -s -o /dev/null -w "%{http_code}" \
          "https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net")
          
        if [ "$status" != "200" ]; then
          echo "Frontend health check failed with status: $status"
          exit 1
        fi
