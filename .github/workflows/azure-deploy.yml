name: Deploy to Azure

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'api/**'
      - 'public/**'
      - 'package.json'
      - '.github/workflows/azure-deploy.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  BACKEND_APP_NAME: chat-functions-prod
  BACKEND_RG: rg-chat-prod-001
  FRONTEND_APP_NAME: buddy-chat-app
  FRONTEND_RG: chat-app-frontend-rg

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ format('https://{0}.azurewebsites.net/api/graphql', env.BACKEND_APP_NAME) }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build and Package
      run: |
        cd api/ChatFunctions
        dotnet restore
        dotnet build --configuration Release --output ./output
        
        # Install Azure Functions Core Tools
        if ! command -v func &> /dev/null; then
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
          sudo apt-get update
          sudo apt-get install -y azure-functions-core-tools-4
        fi
        
        cd output
        func pack --build-native-deps --dotnet-isolated

    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_BACKEND_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_BACKEND_SUBSCRIPTION_ID }}
      continue-on-error: true
      id: azure_login

    - name: Check Azure login
      if: steps.azure_login.outcome == 'failure'
      run: |
        echo "Azure login failed. Please ensure:"
        echo "1. Federated credentials are set up using setup-federated-credentials.ps1"
        echo "2. The app registration has the correct permissions"
        echo "3. The GitHub repository matches the federated credential subject"
        echo "4. The GitHub environment 'production' is configured"
        exit 1

    - name: Deploy Function App
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        package: 'api/ChatFunctions/output'
        respect-funcignore: true

    - name: Wait for backend deployment
      run: |
        check_health() {
          local url=$1
          local max_retries=10
          local retry=0
          local delay=30
          
          while [ $retry -lt $max_retries ]; do
            status=$(curl -sL -o /dev/null -w "%{http_code}" "$url" || echo "000")
            if [ "$status" = "200" ]; then
              echo "Backend is healthy (Status: $status)"
              return 0
            fi
            
            echo "Backend not ready (Status: $status), retrying in ${delay}s... (Attempt $((retry+1))/$max_retries)"
            sleep $delay
            retry=$((retry+1))
          done
          
          echo "Backend failed health check after $max_retries attempts"
          return 1
        }

        check_health "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/graphql"

  validate-graphql:
    needs: build-and-deploy-backend
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install GraphQL tools
      run: |
        npm install -g get-graphql-schema
    
    - name: Wait for backend warmup
      run: |
        echo "Waiting for backend to warm up..."
        sleep 30
    
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_BACKEND_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_BACKEND_SUBSCRIPTION_ID }}

    - name: Validate GraphQL Schema
      run: |
        cd api/ChatFunctions
        
        # Check if endpoint is accessible
        echo "Checking endpoint accessibility..."
        status_code=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/graphql")
        if [ "$status_code" != "200" ]; then
          echo "Error: Endpoint is not accessible (Status: $status_code)"
          exit 1
        fi
        
        # Get function key
        echo "Getting function key..."
        function_key=$(az functionapp keys list -g ${{ env.BACKEND_RG }} -n ${{ env.BACKEND_APP_NAME }} --query "functionKeys.default" -o tsv)
        
        if [ -z "$function_key" ]; then
          echo "Error: Failed to get function key"
          exit 1
        fi
        
        # Download schema using introspection
        echo "Downloading schema..."
        export GET_GRAPHQL_SCHEMA_HEADERS="x-functions-key:$function_key"
        npx get-graphql-schema --header "x-functions-key:$function_key" "https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/graphql" > schema.new.graphql
        
        if [ ! -f schema.new.graphql ]; then
          echo "Error: Failed to download schema"
          exit 1
        fi
        
        # Validate schema content
        if ! grep -q "type Query" schema.new.graphql || ! grep -q "type Mutation" schema.new.graphql; then
          echo "Error: Schema validation failed - missing Query or Mutation types"
          exit 1
        fi
        
        echo "Schema validation successful"

  build-frontend:
    needs: validate-graphql
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Build frontend
      run: |
        export NODE_OPTIONS="--max-old-space-size=4096"
        export REACT_APP_GRAPHQL_HTTP_URL="https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/graphql"
        export REACT_APP_GRAPHQL_WS_URL="wss://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/api/graphql-ws"
        npm run build

        echo "Optimizing build output..."
        find build -type f -name "*.map" -delete
        find build -type f -name "*.txt" -delete
        find build -type f -name "LICENSE*" -delete
        find build -type f -name "asset-manifest.json" -delete

    - name: Package frontend
      run: |
        cd build
        zip -r ../frontend.zip . -x "*.map" "*.txt" "*.md"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend.zip
        retention-days: 1

  deploy-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ format('https://{0}.azurewebsites.net', env.FRONTEND_APP_NAME) }}
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: .

    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_FRONTEND_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_FRONTEND_SUBSCRIPTION_ID }}
      continue-on-error: true
      id: azure_login_frontend

    - name: Check Azure login
      if: steps.azure_login_frontend.outcome == 'failure'
      run: |
        echo "Azure login failed. Please ensure:"
        echo "1. Federated credentials are set up using setup-federated-credentials.ps1"
        echo "2. The app registration has the correct permissions"
        echo "3. The GitHub repository matches the federated credential subject"
        echo "4. The GitHub environment 'production' is configured"
        exit 1

    - name: Deploy frontend
      uses: azure/CLI@v1
      with:
        inlineScript: |
          deploy_with_retries() {
            local max_attempts=3
            local attempt=1
            local delay=30
            
            while [ $attempt -le $max_attempts ]; do
              echo "Deployment attempt $attempt of $max_attempts..."
              
              az webapp deploy \
                --resource-group ${{ env.FRONTEND_RG }} \
                --name ${{ env.FRONTEND_APP_NAME }} \
                --src-path "frontend.zip" \
                --type zip \
                --async true \
                --restart true \
                --timeout 300 && return 0
              
              echo "Deployment failed, waiting ${delay}s before retry..."
              sleep $delay
              attempt=$((attempt + 1))
              delay=$((delay * 2))
            done
            
            return 1
          }
          
          deploy_with_retries
          
          echo "Configuring web app settings..."
          az webapp config appsettings set \
            --resource-group ${{ env.FRONTEND_RG }} \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=false \
              WEBSITE_NODE_DEFAULT_VERSION=18-lts \
              WEBSITE_RUN_FROM_PACKAGE=1 \
              WEBSITE_MEMORY_LIMIT_MB=128 \
              NODE_OPTIONS="--max-old-space-size=128" \
              NODE_ENV=production

    - name: Health check
      run: |
        check_health() {
          local url=$1
          local max_retries=5
          local retry=0
          local delay=30
          
          while [ $retry -lt $max_retries ]; do
            status=$(curl -sL -o /dev/null -w "%{http_code}" "$url" || echo "000")
            if [ "$status" = "200" ]; then
              echo "Frontend is healthy (Status: $status)"
              return 0
            fi
            
            echo "Frontend not ready (Status: $status), retrying in ${delay}s... (Attempt $((retry+1))/$max_retries)"
            sleep $delay
            retry=$((retry+1))
          done
          
          echo "Frontend failed health check after $max_retries attempts"
          return 1
        }

        check_health "https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"
