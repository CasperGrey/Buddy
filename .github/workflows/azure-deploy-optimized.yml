name: Deploy to Azure (F1 Tier)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_NAME: buddy-chat-app
  AZURE_BACKEND_NAME: chat-app-backend-123
  AZURE_RESOURCE_GROUP: chat-app-rg

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-client:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Install dependencies and build client
    - name: Build client
      run: |
        echo "Installing production dependencies..."
        npm ci --prefer-offline --no-audit --omit=dev --no-optional --ignore-scripts
        npm install --no-save react-scripts
        
        echo "Building client..."
        GENERATE_SOURCEMAP=false \
        INLINE_RUNTIME_CHUNK=false \
        DISABLE_ESLINT_PLUGIN=true \
        npm run build:client
        
        echo "Optimizing build output..."
        find build -type f -name "*.map" -delete
      env:
        CI: true
        NODE_OPTIONS: --max-old-space-size=3072

    # Package frontend with dependencies
    - name: Package frontend
      run: |
        echo "Packaging frontend..."
        mkdir -p frontend-temp
        # Copy package files
        cp package.json package-lock.json frontend-temp/
        # Copy node_modules (production only)
        cp -r node_modules frontend-temp/
        # Copy build files
        cp -r build/* frontend-temp/
        # Create frontend zip
        cd frontend-temp
        zip -r ../frontend.zip .
        cd ..

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend.zip
        retention-days: 1

  build-server:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Install dependencies and build server
    - name: Build server
      run: |
        echo "Installing production dependencies..."
        npm ci --prefer-offline --no-audit --omit=dev --no-optional --ignore-scripts
        
        echo "Building server..."
        npm run build:server
      env:
        CI: true
        NODE_OPTIONS: --max-old-space-size=2048

    # Package backend with dependencies
    - name: Package backend
      run: |
        echo "Packaging backend..."
        mkdir -p backend-temp
        # Copy package files
        cp package.json package-lock.json backend-temp/
        # Copy node_modules (production only)
        cp -r node_modules backend-temp/
        # Copy server build files
        cp -r build/server/* backend-temp/
        # Create backend zip
        cd backend-temp
        zip -r ../backend.zip .
        cd ..

    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend.zip
        retention-days: 1

  deploy:
    needs: [build-client, build-server]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        app: [frontend, backend]
        include:
          - app: frontend
            name: buddy-chat-app
            artifact: frontend-build
            startup: "pm2 serve /home/site/wwwroot --no-daemon --spa"
          - app: backend
            name: chat-app-backend-123
            artifact: backend-build
            startup: "NODE_ENV=production pm2 start /home/site/wwwroot/server/server.js --name backend --no-daemon --wait-ready --listen-timeout 10000 --max-memory-restart 256M --node-args='--max-old-space-size=256'"
    environment:
      name: Production
      url: ${{ matrix.app == 'frontend' && format('https://{0}.azurewebsites.net', env.AZURE_WEBAPP_NAME) || format('https://{0}.azurewebsites.net', env.AZURE_BACKEND_NAME) }}
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: .

    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy application
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Deploy with zip package
          echo "Deploying ${{ matrix.app }}..."
          az webapp deploy \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ matrix.name }} \
            --src-path "${{ matrix.app }}.zip" \
            --type zip \
            --async false \
            --restart true
          
          # Update app settings
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ matrix.name }} \
            --settings \
              PRE_BUILD_COMMAND="" \
              SCM_DO_BUILD_DURING_DEPLOYMENT=false \
              WEBSITE_NODE_DEFAULT_VERSION=18-lts \
              WEBSITE_RUN_FROM_PACKAGE=1 \
              ${{ matrix.app == 'backend' && format('COSMOS_DB_CONNECTION_STRING={0}', secrets.COSMOS_DB_CONNECTION_STRING) || '' }} \
              ${{ matrix.app == 'backend' && format('REDIS_CONNECTION_STRING={0}', secrets.REDIS_CONNECTION_STRING) || '' }} \
              NODE_ENV=production

  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Health Check
      run: |
        check_health() {
          local url=$1
          local name=$2
          local max_retries=5
          local retry_delay=30
          local retry=0
          
          while [ $retry -lt $max_retries ]; do
            status=$(curl -sL -o /dev/null -w "%{http_code}" $url || echo "000")
            if [ "$status" = "200" ]; then
              echo "$name is healthy (Status: $status)"
              return 0
            fi
            
            echo "$name not ready (Status: $status), retrying in ${retry_delay}s... (Attempt $((retry+1))/$max_retries)"
            sleep $retry_delay
            retry=$((retry+1))
          done
          
          echo "$name failed health check after $max_retries attempts"
          return 1
        }

        # Check frontend first, then backend
        check_health "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" "${{ env.AZURE_WEBAPP_NAME }}"
        frontend_status=$?
        
        check_health "https://${{ env.AZURE_BACKEND_NAME }}.azurewebsites.net/health" "${{ env.AZURE_BACKEND_NAME }}"
        backend_status=$?
        
        if [ $frontend_status -ne 0 ] || [ $backend_status -ne 0 ]; then
          echo "Health check failed"
          exit 1
        fi
