name: Deploy Function App to Azure

on:
  push:
    branches: [ main ]
    paths:
      - 'ChatFunctions/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_FUNCTIONAPP_NAME: chat-functions-prod
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'ChatFunctions'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Function App
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        popd

    - name: Package Function App
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
        zip -r ../../function-app.zip ./*
        popd

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: function-app
        path: function-app.zip
        retention-days: 1

    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_FUNCTION_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_FUNCTION_SUBSCRIPTION_ID }}

    - name: Deploy Function App
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: function-app.zip

  health-check:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_FUNCTION_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_FUNCTION_SUBSCRIPTION_ID }}

    - name: Health Check
      run: |
        check_health() {
          local url=$1
          local name=$2
          local max_retries=5
          local retry_delay=30
          local retry=0
          
          while [ $retry -lt $max_retries ]; do
            status=$(curl -sL -o /dev/null -w "%{http_code}" $url || echo "000")
            if [ "$status" = "200" ]; then
              echo "$name is healthy (Status: $status)"
              return 0
            fi
            
            echo "$name not ready (Status: $status), retrying in ${retry_delay}s... (Attempt $((retry+1))/$max_retries)"
            sleep $retry_delay
            retry=$((retry+1))
          done
          
          echo "$name failed health check after $max_retries attempts"
          return 1
        }

        check_health "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/graphql/health" "${{ env.AZURE_FUNCTIONAPP_NAME }}"
